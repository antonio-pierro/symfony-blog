### Setting up the database through Doctrine2

In order to set up the database you can use the doctrine commands:

* doctrine:generate:entity
```
php app/console doctrine:generate:entity 
```

You can fill out the following parameters:
```
ModelBundel:Post
title string
body text
createdAt date time

ModelBundel:Author
name string 
createdAt date time
```

* You add constraints to make some fields mandatory 
```
use Symfony\Component\Validator\Constraints as Assert
```

* In order to generate the post date automatically you need to add a constructor
```
/**
 * Construct
 */
function public __construct()
{
	this->createdAt = new \DateTime();
}
```

* Refactoring in order to remove code duplication:

..* added “Timestampable abstract class” to avoid code duplication.

* Add relationship between author and post

In the Author class we add posts which is an ArrayCollection type
and into doctrine directive it will be OneToMane relationship

```
    /** 
     * @var ArrayCollection
     *
     * @ORM\OneToMany(targetEntity="Post", mappedBy="author", cascade={"remove"})
     */
    private $posts;
```

* In the Post class we add an author which have as doctrine directive ManyToOne
```
    /**
     * @var Author
     *
     * @ORM\ManyToOne(targetEntity="Author", inversedBy="posts")
     * @ORM\JoinColumn(name="author_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank
     */
    private $author;
```

In order to create these methods for the new fields we can use a generator passing the bundle and the entity names
```
php app/console generate:doctrine:entities
```

#### DoctrineMigrationsBundle
In oder to install the DoctrineMigrationsBundle you need to edit the composer.json file:
```
    "require": {
        "doctrine/migrations": "dev-master",
        "doctrine/doctrine-migrations-bundle": "dev-master"
    }
```
and then update the vendors:
```
php composer.phar update
```

* to look at the difference between our code and the database you can perform the following command:
```
php app/console doctrine:migrations:diff
```
This command generates a new migration file.
This file contains all the SQL commands to perform the database update.
It contains two methods, up and down. Down method is used for the rollback (revert the change). Up method is used to run the migration. 

To run the migration:
```
php app/console doctrine:migrations:migrate
```

#### Fixtures
* We need to install the bundle about fixture.  Add the following to your composer.json file:
```
{
    "require": {
        "doctrine/doctrine-fixtures-bundle": "dev-master"
    }
}
```
Finally, register the Bundle DoctrineFixturesBundle in app/AppKernel.php.
```
public function registerBundles()
{
    $bundles = array(
        // ...
        new Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle(),
        // ...
    );
    // ...
}
```
* Create a fixture file for every entries:
In ModelBundle you create a directory named DataFixtures/ORM
I assign a number to the file which will be the order in which there will be executed 
and a descriptive name.
The 10-Authors.php willl be:
```
<?php

namespace Blog\ModelBundle\DataFixtures\ORM;

use Doctrine\Common\DataFixtures\AbstractFixtures;
use Doctrine\Common\DataFixtures\OrderedFixturesInterface;

/** 
 * Fixture for the Author Entity
 */
class Authors extends AbstractFixtures implements OrderedFixturesInterface
{
    /**
     * {@InheritDoc}
     */
    public function getOrder()
    {
        return 10;
    }

    /**
     * {@InheritDoc}
     */
    public function load(ObjectManager $manager)
    {
        $a1 = new Author();
        $a1->setName('Antonio');

        $a2 = new Author();
        $a2->setName('Leonardo');

        $a3 = new Author();
        $a3->setName('Francesca');

        $manager->persist($a1);
        $manager->persist($a2);
        $manager->persist($a3);

        $manager->flush();
    }
}
```

Likewise you need to generate a file for the Posts which name will be 15-Posts.php

* Now we need to load the fixtures to our database with the command:
```
doctrine:fixtures:load
```
